<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trioshop.repository.mybatis.UserMapper">

    <!--사용자 로그인을 위한 쿼리문 -->
    <!--usercode가 두테이블모두사용되기때문에 별칭을 정해줘야한다.-->
    <!--tuser가 TRIO_USERS,info가 TRIO_USERS_INFO-->
    <select id="loginUser" resultType="UserInfoBySession">
        SELECT tuser.user_code, grade_code, user_id, user_nickname, user_passwd
        FROM TRIO_USERS tuser
        JOIN TRIO_USERS_INFO info ON tuser.user_code = info.user_code
        WHERE tuser.user_id = #{userId}
          AND tuser.user_passwd = #{userPasswd}
    </select>

    <select id="loadUserByUsername" resultType="UserInfoBySession">
        SELECT tuser.user_code, grade_code, user_id, user_nickname, user_passwd
        FROM TRIO_USERS tuser
        JOIN TRIO_USERS_INFO info ON tuser.user_code = info.user_code
        WHERE tuser.user_id = #{userId}
    </select>

    <select id="findByUserCode" resultType="UserPatchModel">
        SELECT user_address, user_tel, user_nickname
        FROM TRIO_USERS_INFO
        WHERE user_code = #{userCode}
    </select>

    <select id="findId" resultType="String">
        SELECT user_id
        FROM TRIO_USERS tuser
        JOIN TRIO_USERS_INFO info ON tuser.user_code = info.user_code
        WHERE info.user_name = #{userName}
          AND info.user_tel = #{userTel}
    </select>
    <!-- parameterType="map" : 매퍼 메서드의 매개변수 타입을 지정합니다
      resultType="UserFindId" : SQL 쿼리의 결과를 매핑할 객체의 타입을 지정합니다. insert 는 반환된는결과가없어서
      사용하지않습니다.
      map: 다양한 형식을 유연하게사용가능-->
    <!-- 사용자 비밀번호찾기를 위한 쿼리문 -->

    <select id="findUserCodeByNameAndId" resultType="Long">
        SELECT tuser.user_code
        FROM TRIO_USERS_INFO info
        JOIN TRIO_USERS tuser ON tuser.user_code = info.user_code
        WHERE user_name = #{userName}
          AND user_id = #{userId}
    </select>

    <update id="updatePw">
        UPDATE TRIO_USERS
        SET user_passwd = #{userPasswd}
        WHERE user_code = #{userCode}
    </update>

    <select id="passwordCheck" resultType="String">
        SELECT user_passwd
        FROM TRIO_USERS
        WHERE user_code = #{userCode}
    </select>

    <update id="patchUserInfo">
        UPDATE TRIO_USERS_INFO
        SET user_address = #{userAddress},
            user_tel = #{userTel},
            user_nickname = #{userNickname}
        WHERE user_code = #{userCode}
    </update>

    <!--  회원가입  -->
    <!-- /join에서 이미 만들어진 userId 인지를 파악할수있는지 확인할수있는 쿼리문을 만들었습니다. -->
    <select id="checkUserIdExists" parameterType="map" resultType="UserJoin">
        SELECT * FROM TRIO_USERS WHERE user_id = #{userId}
    </select>
    <!-- TRIO_USERS 테이블에 사용자 정보 저장 -->
    <insert id="saveUsers" useGeneratedKeys="true" keyProperty="userCode">
        INSERT INTO TRIO_USERS (grade_code, user_id, user_passwd)
        VALUES (1, #{userId}, #{userPasswd})
    </insert>
    <!-- userId와 gradeCode로 userCode 검색   -->
<!--    <select id="selectUserCode" resultType="long">-->
<!--        SELECT user_code-->
<!--        FROM TRIO_USERS-->
<!--        WHERE grade_code = #{gradeCode}-->
<!--        AND user_id = #{userId}-->
<!--        LIMIT 1-->
<!--    </select>-->
    <!-- TRIO_USERS_INFO 테이블에 사용자 상세 정보 저장 -->
    <insert id="saveUserInfo" parameterType="UsersInfoEntity">
        INSERT INTO TRIO_USERS_INFO (user_code, user_name, user_address, user_tel, user_nickname)
        VALUES (#{userCode}, #{userName}, #{userAddress}, #{userTel}, #{userNickname})
    </insert>


    <!--    게스트유저 로그인-->
    <select id="searchGuestUser" resultType="UserInfoBySession">
        SELECT u.user_code, u.grade_code, u.user_id, ui.user_nickname
        FROM TRIO_USERS u
                 JOIN TRIO_USERS_INFO ui ON u.user_code = ui.user_code
        WHERE ui.user_name = #{userName}
          AND ui.user_tel = #{userTel}
    </select>
    <!-- TRIO_USERS 테이블에 유저를 삽입 하고 select 하여 userEntity형식으로 반환-->
    <insert id="insertUsersData" useGeneratedKeys="true" keyProperty="userCode">
        INSERT INTO TRIO_USERS (grade_code, user_id)
        VALUES (#{gradeCode}, #{userId})
        <!-- 삽입된 유저 조회 -->
    </insert>
        <!-- TRIO_USERS_INFO 테이블에 유저 정보를 삽입 -->
    <insert id="insertUsersInfoData">
        INSERT INTO TRIO_USERS_INFO (user_code, user_name, user_tel, user_nickname)
        VALUES (#{userCode},#{userName}, #{userTel}, #{userNickname})
    </insert>
</mapper>
